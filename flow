from dash import Dash, dcc, html, Input, Output, State
import pandas as pd
import plotly.graph_objects as go

app = Dash(__name__)

# Sample initial data
df = pd.DataFrame({
    'time': ['2025-07-06 00:20:00', '2025-07-06 00:40:00'],
    'callBull': [50, 60],
    'putBear': [30, 40],
    'netDelta': [80, 100],
    'pnl': [10, 20],
    'slippage': [5, 10],
})

app.layout = html.Div([
    dcc.Store(id='data-store', data=df.to_dict('records')),
    html.Button('Add Row', id='add-row-btn'),
    dcc.Graph(id='netdelta-graph')
])

@app.callback(
    Output('data-store', 'data'),
    Input('add-row-btn', 'n_clicks'),
    State('data-store', 'data'),
    prevent_initial_call=True
)
def add_row(n_clicks, data):
    df = pd.DataFrame(data)
    # Simulate new data
    new_time = pd.Timestamp.now().strftime("%Y-%m-%d %H:%M:%S")
    new_callBull = 50 + (n_clicks or 1) * 5
    new_putBear = 30 + (n_clicks or 1) * 3
    new_netDelta = new_callBull + new_putBear
    new_pnl = 20 + (n_clicks or 1) * 1.5
    new_slippage = 10 + (n_clicks or 1) * 0.5
    new_row = {
        'time': new_time,
        'callBull': new_callBull,
        'putBear': new_putBear,
        'netDelta': new_netDelta,
        'pnl': new_pnl,
        'slippage': new_slippage
    }
    df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
    return df.to_dict('records')

@app.callback(
    Output('netdelta-graph', 'figure'),
    Input('data-store', 'data')
)
def update_graph(data):
    df = pd.DataFrame(data)
    fig = go.Figure()

    # Primary y-axis traces
    fig.add_trace(go.Scatter(
        x=df['time'], y=df['callBull'],
        mode='lines+markers', name='callBull', yaxis='y1'
    ))
    fig.add_trace(go.Scatter(
        x=df['time'], y=df['putBear'],
        mode='lines+markers', name='putBear', yaxis='y1'
    ))
    fig.add_trace(go.Scatter(
        x=df['time'], y=df['netDelta'],
        mode='lines+markers', name='netDelta', yaxis='y1'
    ))

    # Secondary y-axis traces
    fig.add_trace(go.Scatter(
        x=df['time'], y=df['pnl'],
        mode='lines+markers', name='pnl', yaxis='y2',
        line=dict(dash='dash', color='purple')
    ))
    fig.add_trace(go.Scatter(
        x=df['time'], y=df['slippage'],
        mode='lines+markers', name='slippage', yaxis='y2',
        line=dict(dash='dash', color='orange')
    ))

    # Layout with two y-axes
    fig.update_layout(
        title='Time Series of Net Delta, PnL, and Slippage',
        xaxis=dict(title='Time'),
        yaxis=dict(
            title='NetDelta, CallBull, PutBear',
            showgrid=True,
        ),
        yaxis2=dict(
            title='PnL / Slippage',
            overlaying='y',
            side='right',
            showgrid=False
        ),
        legend=dict(x=0.01, y=0.99, bgcolor='rgba(255,255,255,0.5)'),
        template='plotly_white',
        margin=dict(l=60, r=60, t=50, b=40),
    )
    return fig

if __name__ == '__main__':
    app.run(debug=True, port=8051)
